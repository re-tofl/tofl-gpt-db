Детерминизация это
________________________________________________________________
Детерминированность автомата — это свойство, при котором для всех состояний автомата имеется максимум и минимум одно правило для любого возможного входного символа, а также отсутствуют ε-переходы.
Например, для состояния 1 не может быть два перехода с одним и тем же входным символом.
Для перевода недетерминированного конечного автомата в детерминированный конечный автомат нужно Убрать одноимённые переходы и избавиться от ε-переходов.
================================================================
Алгоритм детерминизации конечного автомата
________________________________________________________________
Детерминизация конечного автомата (КА) — это процесс преобразования недетерминированного конечного автомата (НКА) в эквивалентный детерминированный конечный автомат (ДКА). 
ДКА имеет четкое определение перехода для каждого состояния и символа, в то время как НКА может иметь несколько переходов для одного состояния и символа, а также переходы по ε (пустым строкам).
1. Определите начальное состояние ДКА как множество состояний НКА, в которое входит только начальное состояние НКА и все состояния, достижимые из него по ε-переходам.
2. Для каждого состояния (множества состояний) в ДКА и для каждого символа входного алфавита:
Найдите все состояния НКА, в которые можно перейти из состояний этого множества по данному символу.
Найдите все состояния, достижимые из этих состояний по ε-переходам.
Если это множество состояний новое, добавьте его как новое состояние в ДКА.
3. Состояние ДКА считается конечным, если оно содержит хотя бы одно конечное состояние НКА.
4. Повторяйте шаг 2 до тех пор, пока не будут обработаны все состояния.
================================================================
Пример детерминизации автомата
________________________________________________________________
Рассмотрим пример детерминизации недетерминированного конечного автомата (НКА).
Исходный НКА: Алфавит: {a, b}
Состояния: {q0, q1, q2}
Начальное состояние: q0
Конечные состояния: {q2}
Переходы:
(q0, a) → {q0, q1}
(q0, b) → {q0}
(q1, a) → {q2}
(q2, a) → {q2}
(q2, b) → {q2}
1. Начальное состояние: В НКА начальное состояние — q0. В ДКА для детерминизации также начнем с q0.
2. Переходы: Теперь создаем новые состояния, представляющие множество состояний НКА:
Из состояния q0 по символу a НКА может перейти в {q0, q1}. Таким образом, создаем новое состояние {q0, q1}.
Под множествами вида {q0, q1} подразумевается состояние в детерминированном конечном автомате (ДКА), которое является объединением нескольких состояний из недетерминированного конечного автомата (НКА). 
Из состояния q0 по символу b НКА остается в состоянии q0, значит переход остается таким же: q0 → q0 по b.
Шаг 3. Переходы из {q0, q1}:
По символу a: из q0 по a идем в {q0, q1}, а из q1 по a идем в q2. Объединяя результаты, получаем новое состояние {q0, q1, q2}.
По символу b: из q0 по b идем в q0, а из q1 по b перехода нет, значит, результат — q0.
Шаг 4. Переходы из {q0, q1, q2}:
По символу a: из всех состояний по a можно попасть в {q0, q1, q2}, так как q0 ведет в {q0, q1}, q1 ведет в q2, а q2 ведет в себя.
По символу b: аналогично, по b мы попадем в {q0, q2}.
Конечные состояния: Конечные состояния ДКА — это те множества состояний, которые включают конечное состояние НКА (q2). В нашем случае, это состояния {q0, q1, q2} и {q0, q2}.
Результирующий ДКА:
Алфавит: {a, b}
Состояния: {q0, {q0, q1}, {q0, q1, q2}, {q0, q2}}
Начальное состояние: q0
Конечные состояния: {q0, q2}, {q0, q1, q2}
Переходы:
(q0, a) → {q0, q1}
(q0, b) → q0
({q0, q1}, a) → {q0, q1, q2}
({q0, q1}, b) → q0
({q0, q1, q2}, a) → {q0, q1, q2}
({q0, q1, q2}, b) → {q0, q2}
({q0, q2}, a) → {q0, q1, q2}
({q0, q2}, b) → {q0, q2}
Таким образом, мы получили ДКА, эквивалентный исходному НКА.
================================================================
Контекстно-свободная (КС) грамматика это
________________________________________________________________
КС грамматика - это грамматика, у которой в левых частях всех правил стоят только одиночные нетерминалы.
Язык, задаваемый контекстно-свободной грамматикой, называется контекстно-свободным языком.
КС-грамматика: G = <N, ∑, P, S>, где правила имеют вид: A → β, где β ∈ (N + ∑)*
================================================================
Дерево вывода КС грамматики это
________________________________________________________________
Дерево вывода (дерево разбора) грамматики G=<N, ∑, P, S> - это дерево, в котором:
1. Корень помечен S
2. Если A - вершина (любая, не обязательно корень), а D_1, …, D_n - потомки, то в P присутствует правило A → D_1 … D_n
Крона дерева вывода — цепочка, которая получится, если выписать слева-направо метки листьев.
Сечение — множество таких вершин, что:
1. Любые 2 вершины не лежат на одной ветке
2. Из любого листа есть путь к элементу сечения
Например: корень дерева; все листья.
================================================================
Левосторонний (Левый) вывод в КС грамматике это
________________________________________________________________
Вывод в КС-грамматике левосторонний (левый), если на каждом шаге вывода заменяется самое левое из всех вхождений нетерминальных символов, 
то есть каждый шаг вывода имеет вид: uAθ —> uβθ, где (A → β) ∈ P, A ∈ N и θ ∈ (N U ∑)*, u ∈ ∑*.
Левосторонний вывод однозначно восстанавливается по дереву вывода.
================================================================
Однозначная КС грамматика это
________________________________________________________________
КС грамматика называется однозначной, если для любой выводимой цепочки w ∈ (N U ∑)*, существует только одно дерево вывода.
В противном случае грамматика называется неоднозначной.
================================================================
Неоднозначная КС грамматика это
________________________________________________________________
КС грамматика называется неоднозначной, если хотя бы для одной выводимой цепочки w ∈ (N U ∑)* существует более одного дерева вывода.
================================================================
Рекурсивный нетерминал КС грамматики это
________________________________________________________________
Нетерминал A КС грамматики называется рекурсивным, если A → +αAβ для некоторых α и β. 
Если α = ε, то A называется леворекурсивным; если β = ε, то A называется праворекурсивным.
Т.е. слова лево(право)рекурсивный указывают на то, с какой стороны нетерминал. 
================================================================
Леворекурсивная КС грамматика это
________________________________________________________________
Леворекурсивная грамматика - это грамматика, имеющая хотя бы один леворекурсивный нетерминал.
================================================================
Праворекурсивная КС грамматика это
________________________________________________________________
Праворекурсивная грамматика - это грамматика, имеющая хотя бы один праворекурсивный нетерминал.
================================================================
Рекурсивная КС грамматика это
________________________________________________________________
Рекурсивная грамматика - это грамматика,  в которой все нетерминалы рекурсивные (кроме, может быть, S).
================================================================
Бесполезный символ (нетерминал) в КС грамматике это
________________________________________________________________
Символ D (нетерминал) - бесполезный, если в грамматике нет вывода вида S → *wDy → *wvy, где v, w, y ∈ ∑*
================================================================
Недостижимый символ в КС грамматике это
________________________________________________________________
Недостижимый символ - это символ в грамматике, который не появляется ни в одной выводимой из S цепочке.
================================================================
ε-правило в КС грамматике это
________________________________________________________________
ε-правило - это правило вида A → ε.
================================================================
Неукорачивающая КС грамматика это
________________________________________________________________
Неукорачивающая КС грамматика - это грамматика без ε-правил.
================================================================
КС грамматика с цепным правилом это
________________________________________________________________
КС грамматика с цепным правилом - это КС грамматика, в которой есть правило вида A → B, где A, B ∈ N.
================================================================
КС грамматика без циклов
________________________________________________________________
КС грамматика без циклов - это КС грамматика, в которой нет правила: A → +A
================================================================
Приведённая КС грамматика это
________________________________________________________________
Приведённая КС грамматика - это грамматика без циклов, без бесполезных символов и без цепных правил.
================================================================
Алгоритм удаления бесполезных (непорождающих) символов в КС грамматике
________________________________________________________________
1. Берём все правила, в правой части которых есть хотя бы один терминал. Берём оттуда
множество всех терминалов и нетерминалов слева.
2. Берём все правила, в правой части которых встречаются нетерминалы только из нашего
множества. Добавляем нетерминалы слева в наше множество. Повторяем.
3. На каком то шаге множество стабилизируется (все выводимые правила будут учтены). В нашем
множестве остались терминалы и все небесполезные нетерминалы.
4. Берём разность всех нетерминалов и нетерминалов из нашего построенного множества. Это
будут бесполезные нетерминалы.
5. Удаляем все правила, в которых встречаются бесполезные нетерминалы
================================================================
Алгоритм удаления недостижимых символов
________________________________________________________________
1. Берём множество, состоящее из S.
2. Добавляем в наше множество все нетерминалы и терминалы, которые стоят в правой части
правил, в левой части которых нетерминалы из нашего множества.
3. На каком то шаге множество стабилизируется (все выводимые правила будут учтены). В нашем
множестве остались только достижимые символы (терминалы и нетерминалы).
4. Берём разность всех нетерминалов и нетерминалов из нашего построенного множества. Это
будут бесполезные нетерминалы. То же самое и с терминалами.
5. Удаляем все правила, в которых встречаются бесполезные нетерминалы. То же самое и с
терминалами.
================================================================
Алгоритм удаления ε-правил
________________________________________________________________
1. Нашли все ε-правила. Добавили в множество нетерминалы из левых частей этих ε-правил.
2. Заменили во всех правилах нетерминалы из нашего множества на ε.
3. Схлопнули все ε (ε^n = ε).
4. Повторяем с шага 1, пока можем найти новые ε-правила.
5. Для всех правил вида A → B, где для B существует ε-правило, добавим правила вида A → ε, если таких еще нет.
6. Удаляем все изначальные ε-правила (т.е. те, которые нашли на 1-ом шаге).
================================================================
Алгоритм удаления цепного правила
________________________________________________________________
Если встретилось цепное правило A → B, и в P есть правило вида B → α, α ∈ (N + ∑)*, то добавим правило A → α, а правило A → B вычеркнем.
================================================================





