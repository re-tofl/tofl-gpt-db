Что такое рекурсивный нетерминал?
________________________________________________________________
В теории формальных языков алгоритм построения Глушкова преобразует данное регулярное выражение в эквивалентный недетерминированный конечный автомат (NFA).
Впоследствии НКА можно сделать детерминированным, а затем минимизировать, чтобы получить оптимальный автомат, соответствующий заданному регулярному выражению.
Алгоритм Глушкова работает следующим образом:
1)Линеаризация выражения. Каждая буква алфавита, появляющаяся в выражении e, переименовывается, так что каждая буква встречается в новом выражении не более одного раза 
2)Создается стартовое состояние, которое является переходом для каждого символа алфавита языка.
3)Для каждого состояния и каждого символа алфавита языка определяется переход к следующему состоянию, если это возможно в соответствии с языком.
Если переход невозможно, то создается новый переход к новому состоянию.
Если переход к новому состоянию возможен, то создается переход к нему.
4)Алгоритм продолжается, пока не будет достигнуто конечное состояние, которое является acceptance state (статус приема) для языка.
================================================================
Дать определение конечного детерминированного распознавателя 
________________________________________________________________
Конечный детерминированный распознаватель (ДКР) — это конечный автомат, принимающий или отклоняющий заданную строку символов путём прохождения через последовательность состояний, определённых строкой.

Детерминированный распознаватель задается пятеркой М=(Q,Σ,δ,q0,F), где:
1. Q={q0,…,qm} — конечное множество состояний;
2. Σ={a0,…,an} — конечное множество входных символов (входной алфавит);
3. δ(x,y) – функция переходов (transition function) δ:QХΣ→Q;
4. q0 ∈ Q – начальное состояние;
5. F ⊂ Q – подмножество конечных состояний.

В детерминированном автомате из состояния qi по букве a может быть только один переход.

ДКР функционирует следующим образом:
1) В начальный момент времени, находясь в состоянии q0, он обозревает самый левый символ входной строки.
2) Строка читается слева направо, без возвратов, сдвигаясь вправо на один символ за каждый шаг работы автомата.
3) В соответствии с заданной функцией переходов автомат изменяет свои внутренние состояния в процессе чтения входной строки. 
4) Прочитав её до конца, автомат оказывается либо в одном из заключительных состояний (и в этом случае строка будет допущена или распознана автоматом), либо в каком-то другом, не заключительном (и в этом случае строка отвергается).
================================================================
Дать определение конечного недетерминированного распознавателя 
________________________________________________________________
Недетерминированный конечный распознаватель (НКР) — это детерминированный конечный автомат, который не выполняет следующие условия:
1) Любой его переход единственным образом определяется по текущему состоянию и входному символу
2) Чтение входного символа требуется для каждого изменения состояния.
В частности, любой ДКА является также НКА.

Недетерминированный распознаватель задается пятеркой М=(Q,Σ,δ,q0,F), где:
1. Q={q0,…,qm} — конечное множество состояний;
2. Σ={a0,…,an} — конечное множество входных символов (входной алфавит);
3. δ(x,y) – функция переходов (transition function) δ:QХΣ→P(Q), где P(Q) – множество всех подмножеств состояний;
4. q0 ∈ Q – начальное состояние;
5. F ⊂ Q – подмножество конечных состояний.

В недетерминированном автомате из состояния qi по букве a может быть несколько переходов.

НКР функционирует следующим образом:
1) Машина начинает с определённого начального состояния q0 и читает строку символов.
2) Для каждого входного символа распознаватель переходит в новое состояние, пока не обработает все входные символы.
3) На каждом шаге автомат произвольным образом выбирает один из возможных переходов.
4) Если существует «удачный проход», то есть некоторая последовательность выборов, приводящая к конечному состоянию после полной выборки входной строки, то строка принимается. 
   Если же нет последовательности, которая после обработки всей входной строки приводит автомат в конечное состояние, то входная строка отвергается.
================================================================
Доказать следующую теорему: Если язык L распознается недетерминированным распознавателем M, то найдется детерминированный распознаватель M’ распознающий язык L.
________________________________________________________________
Доказательство:
Пусть М=(Q,∑,δ,q0,F) – недетерминированный распознаватель. По недетерминированному распознавателю M построим детерминированный распознаватель M’=( Q’ ,∑, δ’, q’0, F) следующим образом:
1. Q’ — множество всех подмножеств множества Q;
2. входной алфавит M’ совпадает с алфавитом M, то есть ∑;
3. функция переходов δ' определим следующим образом: δ'(O,a)= {q’| δ(q,a) q∈O, где O∈ Q’} очевидно, что функция δ' определена на всех подмножествах O⊆Q;
4. q’0 ={ q’0} – начальное состояние
5. конечными состояниями является подмножество O∈Q’, такие, что, если q∈O, то q∈F. которое обозначим
как 2Q;

Функция переходов при любом значении аргументов имеет одно значение δ'(O,a), которое является подмножеством состояний. Покажем, что построенный детерминированный автомат M’ распознает язык L.

Сначала докажем более общий факт: распознаватель M из состояния qi за n тактов переходит в заключительной состояние qf(qiw├n qfe), тогда и только тогда, когда распознаватель M’ из некоторого состояния Oi такого, что qi∈Oi переходит в заключительно состояние Of за n тактов. Это утверждение запишем следящим образом:
(qiw├n qfe) ⇔ Oiw├nOfe и qi∈Oi, qf ∈ Of.

Доказательство проведем индукцией по длине слова w.
Пусть длинна слова |w|=1 (слово из одной буквы w=a). Предположим, что распознаватель M за один такт для некоторого входного слов состоящего из одного символа a приходит в заключительное состояние это означает, что qa├qfe, то есть qf ∈δ(qi,a). Рассмотрим, как будет работать M’ на этом же слове. Возьмем подмножество {q}.

Согласно нашему определению функции переходов qf∈δ'({q},a)=O. Согласно определению конечных состояний в M’, состояние δ'({q},a) конечное состояние. То есть слово распознается.

Пусть утверждение верно для слов длины |w|=n, покажем, что оно верно для слов длины n+1.
Предположим, что M распознает слово |aw|= n+1, то есть за n+1 шаг приходит в заключительно состояние qiaw├n+1 qfe. Рассмотрим w. Его длинна равна n. Согласно индуктивному предположению M’ приходит в заключительное состояние, из некоторой конфигурации <Ok,w>, так как qkw├n qfe. Более того qk ∈ Ok. Возьмём прообраз Ok. Если автомат M распознает его, то по индуктивному предположению оно распознается и M’.
Okw├n Ofe и Oiaw├Okw и Okw├n Ofe, что и требовалось доказать.

Докажем утверждение в обратную сторону.
Пусть слово w=a распознается автоматом M’ за один шаг, Oiа├ Ofe, тогда в qf∈Of , тогда найдется q∈Qi, что qf∈δ(q,a) и qa├n qfe

Пусть слово |aw|=n+1 и распознается автоматом M’ за n+1 такт Oiаw├n+1 Ofe, тогда Okw├ nOfe. Тогда согласноиндуктивному предположению верно, что qkw├n qfe для некоторого qk∈Ok. Согласно определению δ’ имеем, что Ok=δ’(Oi,a) и qk = δ’(qi,a). Тогда qiaw├ qkw и qkw├n qfe , что соответствует qiaw├n+1 qfe.
В качестве qi можно выбрать q0 поэтому теореме доказана.
================================================================
Дать определение двух-уровневой грамматики 
________________________________________________________________
Двухуровневая грамматика — это формальная грамматика, которая используется для порождения другой формальной грамматики, например с бесконечным множеством правил.

Двухуровневая грамматика - это тройка <G1, G2, z>
 G1 = <N1, Σ1, P1>
 G2 = <N2, Σ2, P2>
 N2 имеет форму ⟨h⟩, где h ∈ (N1 ∪ Σ1)* и ⟨z⟩ ∈ Σ1*

Метасистема:
G1= <N1, Σ1, P1> - широкая система, в которую входит исследуемая система как составная часть/система, являющаяся надстройкой, описанием для другой системы, где
 N1– множество метанетерминалов
 Σ1 - множество метанетерминалов
 P1 - КС – метаправила

Объектная система G2= <N2, Σ2, P2>, где
 N2 – множество объектных терминалов
 Σ2 - множество объектных нетерминалов ⟨𝑤⟩где 𝑤 ∈ (𝑁1 ∪ 𝛴1)*
 P2 - КС –объектных правил
Пусть правило из P2 Y1, Y1 ∈ N1
 ⟨w⟩ → h1. . . hn
Структурные правила:
 F(Y1) ∈ L(G1, Y1)
 F(⟨w⟩) → F(h1. . . hn)

Вывод: X ⇒ Yiff ∃P,Q(N2 ∪ Σ2)*: X = PXQ , Y = PYQ

Пример:
1) G1 ={A, BI, {a,s}, {A → aA|a, B → A},
2) G2={<s>, <A>, <B>}, {a}, {<s> → < A>) ,< A> → a, <B> → a }